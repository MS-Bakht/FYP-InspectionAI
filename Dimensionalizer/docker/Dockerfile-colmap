# docker build -f docker/Dockerfile-colmap -t chenhsuanlin/colmap:3.8 .
# docker push chenhsuanlin/colmap:3.8

# Use an appropriate base image that provides the necessary tools and dependencies
FROM nvcr.io/nvidia/cuda:11.8.0-devel-ubuntu20.04
ARG DEBIAN_FRONTEND=noninteractive

RUN apt-get install -y wget
RUN wget https://cmake.org/files/v3.21/cmake-3.21.3-linux-x86_64.sh
RUN chmod +x cmake-3.21.3-linux-x86_64.sh
RUN ./cmake-3.21.3-linux-x86_64.sh --prefix=/usr/local --exclude-subdir

# Install basic dependencies
RUN apt-get update && apt-get install -y \
    git \
    cmake \
    ninja-build \
    build-essential \
    libboost-program-options-dev \
    libboost-filesystem-dev \
    libboost-graph-dev \
    libboost-system-dev \
    libboost-test-dev \
    libeigen3-dev \
    libflann-dev \
    libfreeimage-dev \
    libmetis-dev \
    libgoogle-glog-dev \
    libgflags-dev \
    libsqlite3-dev \
    libglew-dev \
    qtbase5-dev \
    libqt5opengl5-dev \
    libcgal-dev \
    libceres-dev \
    xvfb

# Clone Colmap repository and build
RUN git clone https://github.com/colmap/colmap.git && \
    cd colmap && git checkout 3.8 && \
    mkdir build && cd build && \
    cmake .. -DCUDA_ENABLED=ON -DCMAKE_CUDA_ARCHITECTURES="70;72;75;80;86" -GNinja && \
    ninja && \
    ninja install

# Install Python packages
RUN apt-get install -y python3-pip ffmpeg && \
    pip3 install addict k3d opencv-python-headless pillow plotly pyyaml trimesh

# Set the working directory if needed
# WORKDIR /app

# Set the entry command if needed
# CMD ["your_command_to_run_application"]
